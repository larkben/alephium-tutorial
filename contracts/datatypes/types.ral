// Structs
struct Foo { x: U256, mut y: U256 }

Contract RalphTypes (
    time: U256,       // 326478362478326478 ~ milliseconds
    mut condition: Bool,  // True or False
    mut text: ByteVec,    // ByteVec = String
    owner: Address,   // Alephium Address @dhjskdhasjkdhasjkdhasjkdhasjkdhjkasdd
    array: [U256; 4], // array = [1,2,3,4]
    mut result: U256,
    mut hash: ByteVec
) {
    @using(updateFields = true, checkExternalCaller = false)
    pub fn getTime(x: U256) -> () {
        let mut tempfoo = Foo{x: 5, y: 7}

        tempfoo.y = getIndex(1) * x

        result = time * tempfoo.y

        emit Debug(`The current result is ${result}`) // Debug
    }

    pub fn getCondition() -> Bool {
        return condition
    }

    pub fn getText() -> ByteVec {
        return text
    }

    pub fn getOwner() -> Address {
        return owner
    }

    pub fn getArray() -> [U256; 4] {
        return array
    }

    @using(updateFields = true, checkExternalCaller = false)
    pub fn getIndex(x: U256) -> (U256) {

        result = array[x]

        return array[x]
    }

    @using(updateFields = true, checkExternalCaller = false)
    pub fn compareHash(string: ByteVec) -> () { // "apple" -> hashed(apple)

        let shaResult = sha256!(string)

        hash = shaResult

        if (shaResult == text) {
            condition = true
        }
        
    }

    @using(updateFields = true, checkExternalCaller = false)
    pub fn updateText(string: ByteVec) -> () {

        text = string

    }
}